================================================================================
COMMENT statement
================================================================================

/* comment */

--------------------------------------------------------------------------------

(source_code
  (comment))

================================================================================
COMMENT (long) statement
================================================================================

/********************
 THIS
 IS
 MULTILINE
 COMMENT
********************/

--------------------------------------------------------------------------------

(source_code
  (comment))

================================================================================
INCLUDE statement
================================================================================

{include_file.i arg1 &arg2 = "test" arg3 "NEW"}

--------------------------------------------------------------------------------

(source_code
  (include
    (file_name)
    (include_argument
      (identifier))
    (include_argument
      (identifier)
      (double_quoted_string))
    (include_argument
      (identifier))
    (include_argument
      (double_quoted_string))))

================================================================================
VARIABLE DEFINITION statement
================================================================================

DEFINE VARIABLE full_variable AS INTEGER.
DEFINE VAR  full_var AS INTEGER.

DEF VARIABLE short_variable AS INTEGER.
DEF VAR short_var AS INTEGER.

DEFINE VARIABLE no_undo AS INTEGER NO-UNDO.
DEFINE VARIABLE initial AS INTEGER INITIAL ?.

DEFINE VARIABLE clone LIKE short_variable.

--------------------------------------------------------------------------------

(source_code
  (variable_definition
    (identifier)
    (primitive_type))
  (variable_definition
    (identifier)
    (primitive_type))
  (variable_definition
    (identifier)
    (primitive_type))
  (variable_definition
    (identifier)
    (primitive_type))
  (variable_definition
    (identifier)
    (primitive_type)
    (variable_tuning))
  (variable_definition
    (identifier)
    (primitive_type)
    (variable_tuning
      (null_expression)))
  (variable_definition
    (identifier)
    (identifier)))

================================================================================
VARIABLE ASSIGNMENT statement
================================================================================

DEFINE VARIABLE variable AS INTEGER.
variable = 5.

--------------------------------------------------------------------------------

(source_code
  (variable_definition
    (identifier)
    (primitive_type))
  (variable_assignment
    (assignment
      (identifier)
      (number_literal))))

================================================================================
BINARY (simple) operators
================================================================================

x = 2 + 2.
y = (4 * 3) / 2.
z = 2 > 4.

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (additive_expression
        (number_literal)
        (number_literal))))
  (variable_assignment
    (assignment
      (identifier)
      (multiplicative_expression
        (parenthesized_expression
          (multiplicative_expression
            (number_literal)
            (number_literal)))
        (number_literal))))
  (variable_assignment
    (assignment
      (identifier)
      (comparison_expression
        (number_literal)
        (number_literal)))))

================================================================================
UNARY (simple) operators
================================================================================

w = -(0).
x = -f().
y = -table.field.
z = -obj:method().

z = NOT y.
y = NOT -x < -10 OR x = 10.

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (parenthesized_expression
          (number_literal)))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (function_call
          (identifier)))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (field_access
          (identifier)
          (field_identifier)))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (object_access
          (identifier)
          (function_call
            (identifier))))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (identifier))))
  (variable_assignment
    (assignment
      (identifier)
      (logical_expression
        (unary_expression
          (comparison_expression
            (unary_expression
              (identifier))
            (unary_expression
              (number_literal))))
        (comparison_expression
          (identifier)
          (number_literal))))))

================================================================================
UNARY/BINARY operators
================================================================================

z = NOT y > 5.
y = NOT 2 + 2.
z = NOT 2 + 2 = 5.
zr = NOT 5 = 2 + 2.

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (comparison_expression
          (identifier)
          (number_literal)))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (additive_expression
          (number_literal)
          (number_literal)))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (comparison_expression
          (additive_expression
            (number_literal)
            (number_literal))
          (number_literal)))))
  (variable_assignment
    (assignment
      (identifier)
      (unary_expression
        (comparison_expression
          (number_literal)
          (additive_expression
            (number_literal)
            (number_literal)))))))

================================================================================
FIELD ACCESS
================================================================================

DISPLAY table.field1.

--------------------------------------------------------------------------------

(source_code
  (abl_statement
    statement: (identifier)
    (field_access
      table: (identifier)
      field: (field_identifier))))

================================================================================
BUFFER DEFINITION statement
================================================================================

DEFINE BUFFER x-table FOR table.

--------------------------------------------------------------------------------

(source_code
  (buffer_definition
    (identifier)
    (identifier)))

================================================================================
IF statement
================================================================================

IF x > 10 THEN DO:
  x = 10.
END.

--------------------------------------------------------------------------------

(source_code
  (if_do_statement
    condition: (comparison_expression
      (identifier)
      (number_literal))
    (body
      (variable_assignment
        (assignment
          (identifier)
          (number_literal))))))

================================================================================
IF ELSE DO statement
================================================================================

IF x > 10 THEN DO:
  x = 10.
END.
ELSE DO:
  x = x.
END.

--------------------------------------------------------------------------------

(source_code
  (if_do_statement
    condition: (comparison_expression
      (identifier)
      (number_literal))
    (body
      (variable_assignment
        (assignment
          (identifier)
          (number_literal))))
    (else_do_statement
      (body
        (variable_assignment
          (assignment
            (identifier)
            (identifier)))))))

================================================================================
IF ELSE IF statement
================================================================================

IF x > 10 THEN DO:
  x = 10.
END.
ELSE IF x < 10 THEN DO:
  x = x.
END.
ELSE DO:
  x = x.
END.

--------------------------------------------------------------------------------

(source_code
  (if_do_statement
    condition: (comparison_expression
      (identifier)
      (number_literal))
    (body
      (variable_assignment
        (assignment
          (identifier)
          (number_literal))))
    (else_do_if_statement
      condition: (comparison_expression
        (identifier)
        (number_literal))
      (body
        (variable_assignment
          (assignment
            (identifier)
            (identifier)))))
    (else_do_statement
      (body
        (variable_assignment
          (assignment
            (identifier)
            (identifier)))))))

================================================================================
IF THEN statement
================================================================================

IF x > 10 THEN x = 10.

--------------------------------------------------------------------------------

(source_code
  (if_then_statement
    condition: (comparison_expression
      (identifier)
      (number_literal))
    (variable_assignment
      (assignment
        (identifier)
        (number_literal)))))

================================================================================
IF ELSE THEN statement
================================================================================

IF x > 10 THEN x = 10.
ELSE x = x.

--------------------------------------------------------------------------------

(source_code
  (if_then_statement
    condition: (comparison_expression
      (identifier)
      (number_literal))
    (variable_assignment
      (assignment
        (identifier)
        (number_literal)))
    (else_then_statement
      (variable_assignment
        (assignment
          (identifier)
          (identifier))))))

================================================================================
LOGICAL expressions
================================================================================

w = YES.
x = NO.
y = TRUE.
z = FALSE.
IF YES AND TRUE THEN DISPLAY "yes".

x = YES AND NO.
x = YES OR NO.

y = x < 10 OR x = 10.

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (boolean_literal)))
  (variable_assignment
    (assignment
      (identifier)
      (boolean_literal)))
  (variable_assignment
    (assignment
      (identifier)
      (boolean_literal)))
  (variable_assignment
    (assignment
      (identifier)
      (boolean_literal)))
  (if_then_statement
    condition: (logical_expression
      (boolean_literal)
      (boolean_literal))
    (abl_statement
      statement: (identifier)
      (double_quoted_string)))
  (variable_assignment
    (assignment
      (identifier)
      (logical_expression
        (boolean_literal)
        (boolean_literal))))
  (variable_assignment
    (assignment
      (identifier)
      (logical_expression
        (boolean_literal)
        (boolean_literal))))
  (variable_assignment
    (assignment
      (identifier)
      (logical_expression
        (comparison_expression
          (identifier)
          (number_literal))
        (comparison_expression
          (identifier)
          (number_literal))))))

================================================================================
REPEAT statement
================================================================================

REPEAT:
  x = 5.
END.

--------------------------------------------------------------------------------

(source_code
  (repeat_statement
    (body
      (variable_assignment
        (assignment
          (identifier)
          (number_literal))))))

================================================================================
DO WHILE statement
================================================================================

DO WHILE x < 10:
  x = 5.
END.


--------------------------------------------------------------------------------

(source_code
  (do_while_statement
    condition: (comparison_expression
      (identifier)
      (number_literal))
    (body
      (variable_assignment
        (assignment
          (identifier)
          (number_literal))))))

================================================================================
DO statement
================================================================================

DO x = 5 TO 20:
  x = 5.
END.


--------------------------------------------------------------------------------

(source_code
  (do_statement
    (assignment
      (identifier)
      (number_literal))
    (number_literal)
    (body
      (variable_assignment
        (assignment
          (identifier)
          (number_literal))))))

================================================================================
PROCEDURE statement
================================================================================

PROCEDURE some_procedure:
  /* nice */
END PROCEDURE.

RUN some_procedure.

--------------------------------------------------------------------------------

(source_code
  (procedure_statement
    (identifier)
    (comment))
  (abl_statement
    statement: (identifier)
    (identifier)))

================================================================================
FUNCTION statement
================================================================================

FUNCTION fn RETURNS INTEGER (INPUT par1 AS INTEGER).
  RETURN par1.
END FUNCTION.

--------------------------------------------------------------------------------

(source_code
  (function_statement
    name: (identifier)
    return_type: (primitive_type)
    (function_parameter
      (function_parameter_mode)
      (identifier)
      (primitive_type))
    (body
      (return_statement
        (identifier)))))

================================================================================
DO TRANSACTION statement
================================================================================

DO TRANSACTION:
  CREATE x.
END.

--------------------------------------------------------------------------------

(source_code
  (transaction_statement
    (body
      (abl_statement
        statement: (identifier)
        (identifier)))))

================================================================================
ABL GENERIC statement
================================================================================

DISPLAY "test" a 5 f().

--------------------------------------------------------------------------------

(source_code
  (abl_statement
    statement: (identifier)
    (double_quoted_string)
    (identifier)
    (number_literal)
    (function_call
      function: (identifier))))

================================================================================
ASSIGN statement
================================================================================

ASSIGN 
  a = 1
  b = "ABC"
  c = f()
.

--------------------------------------------------------------------------------

(source_code
  (assign_statement
    (assignment
      (identifier)
      (number_literal))
    (assignment
      (identifier)
      (double_quoted_string))
    (assignment
      (identifier)
      (function_call
        (identifier)))))

================================================================================
FOR EACH statement
================================================================================

FOR EACH some_table OF other_table WHERE x = 5 NO-LOCK:
  DISPLAY some_table.
END.


--------------------------------------------------------------------------------

(source_code
  (for_statement
    table: (identifier)
    (of
      (identifier))
    (where_clause
      condition: (comparison_expression
        (identifier)
        (number_literal)))
    (query_tuning)
    (body
      (abl_statement
        statement: (identifier)
        (identifier)))))

================================================================================
FOR EACH (sorted) statement
================================================================================

FOR EACH some_table WHERE x = 5 BREAK BY col1 DESCENDING col2:
  DISPLAY some_table.
END.

--------------------------------------------------------------------------------

(source_code
  (for_statement
    table: (identifier)
    (where_clause
      condition: (comparison_expression
        (identifier)
        (number_literal)))
    (sort_clause
      (sort_column
        column: (identifier)
        (sort_order))
      (sort_column
        column: (identifier)))
    (body
      (abl_statement
        statement: (identifier)
        (identifier)))))

================================================================================
FIND statement
================================================================================

FIND some_table OF other_table WHERE x > 5 EXCLUSIVE-LOCK NO-ERROR.

--------------------------------------------------------------------------------

(source_code
  (find_statement
    table: (identifier)
    (of
      (identifier))
    (where_clause
      condition: (comparison_expression
        (identifier)
        (number_literal)))
    (query_tuning)
    (query_tuning)))

================================================================================
FIND FIRST (no terminator) statement
================================================================================

FIND FIRST some_table WHERE NOT x > 5.

--------------------------------------------------------------------------------

(source_code
  (find_statement
    table: (identifier)
    (where_clause
      condition: (unary_expression
        (comparison_expression
          (identifier)
          (number_literal))))))

================================================================================
CAN-FIND function
================================================================================

w = CAN-FIND(LAST x OF y USING z1 AND FRAME f z2 WHERE z NO-LOCK).

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (can_find_expression
        table: (identifier)
        (of
          (identifier))
        (using
          field: (identifier))
        (using
          frame: (identifier)
          field: (identifier))
        (where_clause
          condition: (identifier))
        (query_tuning)))))

================================================================================
OBJECT ACCESSORS statement
================================================================================

DISPLAY some_object:root.
DISPLAY some_object:chained_property:chained_another:method().

--------------------------------------------------------------------------------

(source_code
  (abl_statement
    statement: (identifier)
    (object_access
      (identifier)
      property: (identifier)))
  (abl_statement
    statement: (identifier)
    (object_access
      (identifier)
      property: (identifier)
      property: (identifier)
      method: (function_call
        function: (identifier)))))

================================================================================
TERNARY EXPRESSION statement
================================================================================

x = IF x > 10 THEN 10 ELSE x.

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (ternary_expression
        condition: (comparison_expression
          (identifier)
          (number_literal))
        then: (number_literal)
        else: (identifier)))))

================================================================================
TERNARY EXPRESSION (parenthesised) statement
================================================================================

x = (IF NOT x > 10 THEN 10 ELSE x).

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (parenthesized_expression
        (ternary_expression
          condition: (unary_expression
            (comparison_expression
              (identifier)
              (number_literal)))
          then: (number_literal)
          else: (identifier))))))

================================================================================
ACCUMULATE statement
================================================================================

ACCUMULATE Customer.CreditLimit (AVERAGE COUNT MAXIMUM). 
value = (accum total Customer.CreditLimit).

--------------------------------------------------------------------------------

(source_code
  (accumulate_statement
    (field_access
      (identifier)
      (field_identifier))
    (accumulate_aggregate)
    (accumulate_aggregate)
    (accumulate_aggregate))
  (variable_assignment
    (assignment
      (identifier)
      (parenthesized_expression
        (accumulate_expression
          (accumulate_aggregate)
          (field_access
            (identifier)
            (field_identifier)))))))

================================================================================
STREAM statements
================================================================================

INPUT FROM VALUE(in).
OUTPUT TO VALUE(out).

OUTPUT CLOSE.
INPUT CLOSE.

DEFINE STREAM i.
INPUT STREAM i FROM VALUE(in).
INPUT CLOSE.

INPUT STREAM-HANDLE hi FROM VALUE(in).
INPUT CLOSE.

DEFINE STREAM o.
OUTPUT STREAM o TO "CLIPBOARD".
OUTPUT CLOSE.

OUTPUT STREAM-HANDLE ho TO "CLIPBOARD".
OUTPUT CLOSE.

--------------------------------------------------------------------------------

(source_code
  (input_stream_statement
    target: (function_call
      function: (identifier)
      (function_call_argument
        (identifier))))
  (output_stream_statement
    target: (function_call
      function: (identifier)
      (function_call_argument
        (identifier))))
  (output_close_statement)
  (input_close_statement)
  (stream_definition
    (identifier))
  (input_stream_statement
    source: (identifier)
    target: (function_call
      function: (identifier)
      (function_call_argument
        (identifier))))
  (input_close_statement)
  (input_stream_statement
    source: (identifier)
    target: (function_call
      function: (identifier)
      (function_call_argument
        (identifier))))
  (input_close_statement)
  (stream_definition
    (identifier))
  (output_stream_statement
    source: (identifier)
    target: (double_quoted_string))
  (output_close_statement)
  (output_stream_statement
    source: (identifier)
    target: (double_quoted_string))
  (output_close_statement))

================================================================================
Keyword comparison operators
================================================================================

v = 9 GE 0 AND 0 LT 9.
w = (9 + 10 LE 21) NE (9 + 10 > 21).
x = (2 + 2 GT 0) EQ (2 + 2 > 0).
y = "y" BEGINS "yes".
z = "yes" MATCHES "y*".
FIND foo WHERE bar CONTAINS "stuff" OR baz CONTAINS "what?".

--------------------------------------------------------------------------------

(source_code
  (variable_assignment
    (assignment
      (identifier)
      (logical_expression
        (comparison_expression
          (number_literal)
          (number_literal))
        (comparison_expression
          (number_literal)
          (number_literal)))))
  (variable_assignment
    (assignment
      (identifier)
      (comparison_expression
        (parenthesized_expression
          (comparison_expression
            (additive_expression
              (number_literal)
              (number_literal))
            (number_literal)))
        (parenthesized_expression
          (comparison_expression
            (additive_expression
              (number_literal)
              (number_literal))
            (number_literal))))))
  (variable_assignment
    (assignment
      (identifier)
      (comparison_expression
        (parenthesized_expression
          (comparison_expression
            (additive_expression
              (number_literal)
              (number_literal))
            (number_literal)))
        (parenthesized_expression
          (comparison_expression
            (additive_expression
              (number_literal)
              (number_literal))
            (number_literal))))))
  (variable_assignment
    (assignment
      (identifier)
      (comparison_expression
        (double_quoted_string)
        (double_quoted_string))))
  (variable_assignment
    (assignment
      (identifier)
      (comparison_expression
        (double_quoted_string)
        (double_quoted_string))))
  (find_statement
    table: (identifier)
    (where_clause
      condition: (logical_expression
        (comparison_expression
          (identifier)
          (double_quoted_string))
        (comparison_expression
          (identifier)
          (double_quoted_string))))))

================================================================================
Miscellaneous unary expressions
================================================================================

FIND foo WHERE bar NO-ERROR.
success = AVAILABLE foo AND NOT AMBIGUOUS foo.
PROMPT-FOR bar FRAME y.
baz = INPUT FRAME y bar.
PROMPT-FOR qux.
quux = INPUT qux.
IF LOCKED foo THEN RETURN 'error'.
FIND CURRENT x.
IF CURRENT-CHANGED x THEN RETURN '!'.

--------------------------------------------------------------------------------

(source_code
  (find_statement
    table: (identifier)
    (where_clause
      condition: (identifier))
    (query_tuning))
  (variable_assignment 
    (assignment
      (identifier)
      (logical_expression
        (available_expression
          (identifier))
        (unary_expression
          (ambiguous_expression
            (identifier))))))
  (abl_statement
    statement: (identifier)
    (identifier)
    (identifier)
    (identifier))
  (variable_assignment 
    (assignment
      (identifier)
      (input_expression
        frame: (identifier)
        field: (identifier))))
  (abl_statement
    statement: (identifier)
    (identifier))
  (variable_assignment
    (assignment
      (identifier)
      (input_expression
        field: (identifier))))
  (if_then_statement
    condition: (locked_expression
      (identifier))
    (return_statement
      (single_quoted_string)))
  (find_statement
    table: (identifier))
  (if_then_statement
    condition: (current_changed_expression
      (identifier))
    (return_statement
      (single_quoted_string))))
