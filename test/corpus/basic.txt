================================================================================
COMMENT statement
================================================================================

/* comment */

--------------------------------------------------------------------------------

(source_code
		(comment))

================================================================================
COMMENT (long) statement
================================================================================

/********************
 THIS
 IS
 MULTILINE
 COMMENT
********************/

--------------------------------------------------------------------------------

(source_code
		(comment))

================================================================================
INCLUDE statement
================================================================================

{include_file.i arg1 &arg2 = "test" arg3}

--------------------------------------------------------------------------------

(source_code
	(include
		(file_name)
		(include_argument
			(identifier))
		(include_argument
			(identifier)
			(double_quoted_string))
		(include_argument
			(identifier))))

================================================================================
VARIABLE DEFINITION statement
================================================================================

DEFINE VARIABLE full_variable AS INTEGER.
DEFINE VAR  full_var AS INTEGER.

DEF VARIABLE short_variable AS INTEGER.
DEF VAR short_var AS INTEGER.

DEFINE VARIABLE no_undo AS INTEGER NO-UNDO.
DEFINE VARIABLE initial AS INTEGER INITIAL ?.

DEFINE VARIABLE clone LIKE short_variable.

--------------------------------------------------------------------------------

(source_code
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(variable_tuning)
			(terminator)))
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(variable_tuning
				(expression
					(null_expression)))
			(terminator)))
	(statement
	  (variable_definition
		  (identifier)
			(identifier)
			(terminator))))
		


================================================================================
VARIABLE ASSIGNMENT statement
================================================================================

DEFINE VARIABLE variable AS INTEGER.
variable = 5.

--------------------------------------------------------------------------------


(source_code
	(statement
		(variable_definition
			(identifier)
			(primitive_type)
			(terminator)))
	(statement
		(variable_assignment
		  (assignment
			  (identifier)
				(expression
				  (number_literal)))
			(terminator))))	

================================================================================
UNARY/BINARY operators
================================================================================

x = 2 + 2.
y = (4 * 3) / 2.
z = NOT y > 5.

z1 = NOT 2 + 2.
z2 = NOT 2 + 2 = 5.
zr2 = NOT 5 = 2 + 2.


--------------------------------------------------------------------------------

(source_code
	(statement
		(variable_assignment
			(assignment
				(identifier)
				(expression
					(binary_expression
						(additive_expression
							(expression
								(number_literal))
							(additive_operator)
							(expression
								(number_literal))))))
			(terminator)))
	(statement
		(variable_assignment
			(assignment
				(identifier)
				(expression
					(binary_expression
						(multiplicative_expression
							(expression
								(parenthesized_expression
									(expression
										(binary_expression
											(multiplicative_expression
												(expression
													(number_literal))
												(multiplicative_operator)
												(expression
													(number_literal)))))))
							(multiplicative_operator)
							(expression
								(number_literal))))))
			(terminator)))
	(statement
		(variable_assignment
			(assignment
				(identifier)
				(expression
					(unary_expression
						(unary_operator)
						(expression
							(comparison
								(expression
									(identifier))
								(comparator)
								(expression
									(number_literal)))))))
				(terminator)))
      (statement
        (variable_assignment
          (assignment
            (identifier)
            (expression
              (unary_expression
                (unary_operator)
                (expression
                  (binary_expression
                    (additive_expression
                      (expression
                        (number_literal))
                      (additive_operator)
                      (expression
                        (number_literal))))))))
					(terminator)))
      (statement
        (variable_assignment
          (assignment
            (identifier)
            (expression
              (unary_expression
                (unary_operator)
                (expression
                  (comparison
                    (expression
                      (binary_expression
                        (additive_expression
                          (expression
                            (number_literal))
                          (additive_operator)
                          (expression
                            (number_literal)))))
                    (comparator)
                    (expression
                      (number_literal)))))))
				(terminator)))
      (statement
        (variable_assignment
          (assignment
            (identifier)
            (expression
              (unary_expression
                (unary_operator)
                (expression
                  (comparison
                    (expression
                      (number_literal))
                    (comparator)
                    (expression
                      (binary_expression
                        (additive_expression
                          (expression
                            (number_literal))
                          (additive_operator)
                          (expression
                            (number_literal))))))))))
          (terminator))))



================================================================================
FIELD ACCESS (shallow)
================================================================================

DISPLAY table.field1.

--------------------------------------------------------------------------------

(source_code
	(statement
		(abl_statement
			(identifier)
			(expression
				(field_access
					(identifier)
					(field_identifier)))
			(terminator))))

================================================================================
BUFFER DEFINITION statement
================================================================================

DEFINE BUFFER x-table FOR table.

--------------------------------------------------------------------------------

(source_code
  (statement
    (buffer_definition
      (identifier)
      (identifier)
      (terminator))))
			
================================================================================
IF statement
================================================================================

IF x > 10 THEN DO:
	x = 10.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_do_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(block_terminator)))))

================================================================================
IF ELSE DO statement
================================================================================

IF x > 10 THEN DO:
	x = 10.
END.
ELSE DO:
  x = x.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_do_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))						
				(block_terminator)
				(else_do_statement
					(statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator)))
					(block_terminator))))))

================================================================================
IF ELSE IF statement
================================================================================

IF x > 10 THEN DO:
	x = 10.
END.
ELSE IF x < 10 OR x = 0 THEN DO:
  x = x.
END.
ELSE DO:
	x = x.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_do_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))						
				(block_terminator)
				(else_do_if_statement
					(conditions
						(expression
							(comparison
								(expression
									(identifier))
                (comparator)
								(expression
									(number_literal))))
						(expression
							(comparison
								(expression
									(identifier))
                (comparator)
								(expression
									(number_literal)))))
					(statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator)))
					(block_terminator))
				(else_do_statement
					(statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator)))
					(block_terminator))))))

================================================================================
IF THEN statement
================================================================================

IF x > 10 THEN x = 10.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_then_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(terminated_statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))))))

================================================================================
IF ELSE THEN statement
================================================================================

IF x > 10 THEN x = 10.
ELSE x = x.

--------------------------------------------------------------------------------

(source_code
	(statement
		(if_statement
			(if_then_statement
			  (conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(terminated_statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(else_then_statement
					(terminated_statement
						(variable_assignment
							(assignment
								(identifier)
								(expression
									(identifier)))
							(terminator))))))))

================================================================================
REPEAT statement
================================================================================

REPEAT:
	x = 5.
END.

--------------------------------------------------------------------------------

(source_code
  (statement
    (loop_statement
      (repeat_statement
        (statement
          (variable_assignment
            (assignment
              (identifier)
              (expression
                (number_literal)))
            (terminator)))
        (block_terminator)))))

================================================================================
DO WHILE statement
================================================================================

DO WHILE x < 10:
	x = 5.
END.


--------------------------------------------------------------------------------

(source_code
	(statement
		(loop_statement
			(do_while_statement
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal)))))
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(block_terminator)))))

================================================================================
DO statement
================================================================================

DO x = 5 TO 20:
	x = 5.
END.


--------------------------------------------------------------------------------

(source_code
	(statement
		(loop_statement
			(do_statement
				(assignment
					(identifier)
					(expression
						(number_literal)))
				(number_literal)
				(statement
					(variable_assignment
						(assignment
							(identifier)
							(expression
								(number_literal)))
						(terminator)))
				(block_terminator)))))

================================================================================
PROCEDURE statement
================================================================================

PROCEDURE some_procedure:
  /* nice */
END PROCEDURE.

RUN some_procedure.

--------------------------------------------------------------------------------

(source_code
  (statement
    (procedure_statement
      (identifier)
      (comment)
      (procedure_terminator)))
    (statement
      (abl_statement
        (identifier)
        (expression
          (identifier))
        (terminator))))

================================================================================
FUNCTION statement
================================================================================

FUNCTION fn RETURNS INTEGER (INPUT par1 AS INTEGER).
  RETURN par1.
END FUNCTION.

--------------------------------------------------------------------------------

(source_code
  (statement
    (function_statement
      (identifier)
      (primitive_type)
      (function_parameter
        (function_parameter_mode)
        (identifier)
        (primitive_type))
			(terminator)
      (statement
        (return_statement
				  (expression
            (identifier))
          (terminator)))
      (function_terminator))))

================================================================================
DO TRANSACTION statement
================================================================================

DO TRANSACTION:
  CREATE x.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(transaction_statement
			(statement
				(abl_statement
					(identifier)
					(expression
						(identifier))
					(terminator)))
			(block_terminator))))

================================================================================
ABL GENERIC statement
================================================================================

DISPLAY "test" a 5 f().

--------------------------------------------------------------------------------

(source_code
	(statement
		(abl_statement
			(identifier)
			(expression
				(string_literal
					(double_quoted_string)))
			(expression
				(identifier))
			(expression
				(number_literal))
			(expression
				(function_call
					(identifier)))
			(terminator))))

================================================================================
ASSIGN statement
================================================================================

ASSIGN 
	a = 1
	b = "ABC"
	c = f()
.

--------------------------------------------------------------------------------


(source_code
	(statement
		(abl_statement
			(assign_statement
				(assignment
					(identifier)
					(expression
						(number_literal)))
				(assignment
					(identifier)
					(expression
						(string_literal
							(double_quoted_string))))
				(assignment
					(identifier)
					(expression
						(function_call
							(identifier))))
						(terminator)))))

================================================================================
FOR EACH statement
================================================================================

FOR EACH some_table WHERE x = 5 NO-LOCK:
	DISPLAY some_table.
END.


--------------------------------------------------------------------------------

(source_code
	(statement
		(for_statement
			(identifier)
			(where_clause
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal))))))
			(query_tuning)
			(statement
				(abl_statement
					(identifier)
					(expression
						(identifier))
					(terminator)))
			(block_terminator))))

================================================================================
FOR EACH (sorted) statement
================================================================================

FOR EACH some_table WHERE x = 5 BREAK BY col1 DESCENDING col2:
	DISPLAY some_table.
END.

--------------------------------------------------------------------------------

 (source_code
	(statement
		(for_statement
			(identifier)
			(where_clause
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
              (comparator)
							(expression
								(number_literal))))))
			(sort_clause
				(sort_column
					(identifier)
					(sort_order))
				(sort_column
					(identifier)))
			(statement
				(abl_statement
					(identifier)
					(expression
						(identifier))
					(terminator)))
			(block_terminator))))

================================================================================
FIND statement
================================================================================

FIND some_table WHERE x > 5 EXCLUSIVE-LOCK NO-ERROR.
END.

--------------------------------------------------------------------------------

(source_code
	(statement
		(find_statement
			(identifier)
			(where_clause
				(conditions
					(expression
						(comparison
							(expression
								(identifier))
							(comparator)
							(expression
								(number_literal))))))
			(query_tuning)
			(query_tuning)
			(terminator)))
	(statement
		(block_terminator)))

================================================================================
FIND FIRST (no terminator) statement
================================================================================

FIND FIRST some_table WHERE NOT x > 5.

--------------------------------------------------------------------------------

(source_code
	(statement
		(find_statement
			(identifier)
			(where_clause
				(conditions
					(expression
						(unary_expression
							(unary_operator)
							(expression
								(comparison
									(expression
										(identifier))
									(comparator)
									(expression
										(number_literal))))))))
			(terminator))))
      
================================================================================
OBJECT ACCESSORS statement
================================================================================

DISPLAY some_object:root.
DISPLAY some_object:chained_property:chained_another:method().

--------------------------------------------------------------------------------

 (source_code
  (statement
    (abl_statement
      (identifier)
      (expression
        (object_access
          (identifier)
          (identifier)))
      (terminator)))
  (statement
    (abl_statement
      (identifier)
      (expression
        (object_access
          (identifier)
          (identifier)
          (identifier)
          (function_call
            (identifier))))
      (terminator))))

================================================================================
TERNARY EXPRESSION statement
================================================================================

x = IF x > 10 THEN 10 ELSE x.

--------------------------------------------------------------------------------

(source_code
  (statement
    (variable_assignment
      (assignment
        (identifier)
        (expression
          (ternary_expression
            (conditions
              (expression
                (comparison
                  (expression
                    (identifier))
                  (comparator)
                  (expression
                    (number_literal)))))
            (expression
              (number_literal))
            (expression
              (identifier)))))
      (terminator))))

================================================================================
TERNARY EXPRESSION (parenthesised) statement
================================================================================

x = (IF NOT x > 10 THEN 10 ELSE x).

--------------------------------------------------------------------------------

(source_code
	(statement
		(variable_assignment
			(assignment
				(identifier)
				(expression
					(parenthesized_expression
						(expression
							(ternary_expression
								(conditions
									(expression
										(unary_expression
											(unary_operator)
											(expression
												(comparison
													(expression
														(identifier))
													(comparator)
													(expression
														(number_literal)))))))
								(expression
									(number_literal))
								(expression
									(identifier)))))))
			(terminator))))

================================================================================
ACCUMULATE statement
================================================================================

ACCUMULATE Customer.CreditLimit (AVERAGE COUNT MAXIMUM). 
value = (accum total Customer.CreditLimit).

--------------------------------------------------------------------------------

(source_code
	(statement
		(abl_statement
			(accumulate_statement
				(expression
					(field_access
						(identifier)
						(field_identifier)))
				(accumulate_aggregate)
				(accumulate_aggregate)
				(accumulate_aggregate)
				(terminator))))
	(statement
		(variable_assignment
			(assignment
				(identifier)
				(expression
					(parenthesized_expression
						(expression
							(accumulate_expression
								(accumulate_aggregate)
								(expression
									(field_access
										(identifier)
										(field_identifier))))))))
			(terminator))))
	
================================================================================
STREAM statements
================================================================================

INPUT FROM VALUE(in).
OUTPUT TO VALUE(out).

OUTPUT CLOSE.
INPUT CLOSE.

--------------------------------------------------------------------------------

(source_code
	(statement
		(stream_statement
			(input_stream_statement
				(expression
					(function_call
						(identifier)
						(function_call_argument
							(expression
								(identifier)))))
				(terminator)
				(statement
					(stream_statement
						(output_stream_statement
							(expression
								(function_call
									(identifier)
									(function_call_argument
										(expression
											(identifier)))))
							(terminator)
							(stream_terminator
								(terminator)))))
				(stream_terminator
          (terminator))))))

================================================================================
Booleans
================================================================================

w = YES.
x = NO.
y = TRUE.
z = FALSE.
IF YES AND TRUE THEN DISPLAY "yes".

--------------------------------------------------------------------------------

(source_code
  (statement
    (variable_assignment
      (assignment
        (identifier)
        (expression
          (boolean_expression)))
      (terminator)))
  (statement
    (variable_assignment
      (assignment
        (identifier)
        (expression
          (boolean_expression)))
      (terminator)))
  (statement
    (variable_assignment
      (assignment
        (identifier)
        (expression
          (boolean_expression)))
      (terminator)))
  (statement
    (variable_assignment
      (assignment
        (identifier)
        (expression
          (boolean_expression)))
      (terminator)))
  (statement
    (if_statement
      (if_then_statement
        conditions: (conditions
          (expression
            (boolean_expression))
          (expression
            (boolean_expression)))
        (terminated_statement
          (abl_statement
            statement: (identifier)
            (expression
              (string_literal
                (double_quoted_string)))
            (terminator)))))))
